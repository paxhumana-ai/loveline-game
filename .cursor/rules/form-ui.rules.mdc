---
description:
globs:
alwaysApply: false
---

## Form Defining

Always use `react-hook-form` with zod validation and shadcn ui.
required attributes, value, error is controlled by Controller combined with Shadcn ui.
Use server action for form onSubmit.

````tsx
import { submitOnboarding } from "../action";
import {
  jobEnum,
  companySizeEnum,
  referralSourceEnum,
  jobLabels,
  companySizeLabels,
  referralSourceLabels,
  OnboardingInput,
  onboardingSchema,
} from "../schemas";

export default function OnboardingForm() {
  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitSuccessful },
    setError,
    reset,
  } = useForm<OnboardingInput>({
    resolver: zodResolver(onboardingSchema),
    defaultValues: {
      ...
    },
  });

  // ...

  const onSubmit = async (data: OnboardingInput) => {
    const result = await submitOnboarding(null, data);
    if (result.success) {
      setTimeout(() => {
        router.push("/");
      }, 1000);
    } else if (result.error) {
      if (typeof result.error === "object") {
        Object.entries(result.error).forEach(([field, message]) => {
          setError(field as keyof OnboardingInput, {
            type: "server",
            message: Array.isArray(message) ? message[0] : message,
          });
        });
      }
    }
  };

  // ...

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Label htmlFor="job">직업</Label>
        <Controller
          name="job"
          control={control}
          render={({ field }) => (
            <Select value={field.value} onValueChange={field.onChange}>
              <SelectTrigger id="job">
                <SelectValue placeholder="직업을 선택하세요" />
              </SelectTrigger>
              <SelectContent>
                {jobEnum.options.map((option) => (
                  <SelectItem key={option} value={option}>
                    {jobLabels[option]}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
        />
        {errors.job && (
          <div className="text-destructive text-sm">{errors.job.message}</div>
        )}
      </div>
    </form>
  )
```form-ui.rules.mdc
````
