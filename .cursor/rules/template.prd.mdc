---
alwaysApply: true
---

# 러브라인 게임 프로젝트 요구사항 명세서 (PRD)

## 1. 프로젝트 개요

- **프로젝트 명**: 러브라인 게임 (LoveLine Game)
- **목표**: 오프라인 미팅, 동아리 MT, 모임에서 사용할 수 있는 하트시그널 스타일의 실시간 매칭 게임을 제공합니다. 참가자들은 익명으로 서로를 지목하며, 상호 매칭 시 실제 오프라인에서 함께 활동할 수 있는 기회를 얻습니다.
- **핵심 기술 스택**: Next.js, TypeScript, Supabase, Drizzle ORM, Shadcn/ui, TailwindCSS

## 2. 핵심 기능 (Features)

- **게임방 관리**:
  - 방 생성 시 남녀 참가자 수 설정 (각각 2-8명)
  - 방 코드를 통한 참가자 입장
  - 참가자 상태 관리 (폴링 기반)
- **캐릭터 & 프로필 설정**:
  - MBTI 16가지 중 선택
  - 동물 캐릭터 선택 (익명성 보장)
  - 간단한 닉네임 설정
- **라운드 기반 게임 진행**:
  - 설정된 라운드 수만큼 자동 진행
  - 각 라운드마다 미리 정의된 질문 제시
  - 3분간 자유시간 후 1분간 지목 타임
- **지목 & 메시징 시스템**:
  - 질문에 해당하는 참가자 지목
  - 지목과 함께 간단한 메시지 작성
  - 동물 캐릭터로 익명 전달
- **매칭 이벤트**:
  - 상호 지목 시 팡파레 효과
  - 매칭 알림 및 5분 아이스크림 산책 타임 안내
  - 매칭 히스토리 관리

## 3. IA (페이지 구조도)

```
📱 앱
├── 🏠 홈 (게임 시작/참여)
├── 🎮 통합 게임방 (/room/[code])
│   ├── 👥 참가자 대기실 (상태: waiting)
│   ├── ⏰ 자유시간 (상태: free_time)
│   ├── 🎯 지목 화면 (상태: selection_time)
│   │   ├── ❓ 질문 표시
│   │   ├── 👆 참가자 지목
│   │   └── 💌 메시지 입력
│   ├── 🎉 라운드 결과 (상태: round_result)
│   └── 📊 최종 결과 (상태: finished)
├── ⚙️ 설정
│   ├── 🦁 캐릭터 선택
│   └── 🧠 MBTI 설정
└── 📋 게임 이력
```

### 페이지 구조 특징

- **단일 게임방 페이지**: `/room/[code]`에서 게임 상태에 따라 다른 UI 컴포넌트를 조건부 렌더링
- **상태 기반 UI 전환**: URL 변경 없이 게임 상태(`waiting`, `free_time`, `selection_time`, `round_result`, `finished`)에 따른 컴포넌트 교체
- **실시간 상태 동기화**: 폴링을 통한 게임 상태 실시간 업데이트로 모든 참가자가 동시에 같은 화면 경험
- **컴포넌트 기반 설계**: 각 게임 상태별로 독립적인 컴포넌트로 분리하여 재사용성과 유지보수성 향상

## 4. 비즈니스 도메인 분류

`src/domains/` 디렉토리를 중심으로 비즈니스 로직을 구성합니다.

### 4-1. 각 도메인 설명

- **게임방 (GameRoom)**: 게임 세션 생성, 참가자 관리, 라운드 진행
- **참가자 (Participant)**: 참가자 프로필, 캐릭터, MBTI 관리
- **라운드 (Round)**: 질문 관리, 지목 처리, 시간 관리
- **매칭 (Matching)**: 지목 결과 분석, 매칭 이벤트 처리

### 4-2. 도메인에서 포함하는 기능과 매우 구체적인 유저플로우

#### 기능1: 게임방 생성 및 참가

##### 기능1의 구체적인 비즈니스 로직

**방 생성자 (호스트):**

1. 남성 참가자 수 선택 (2-8명)
2. 여성 참가자 수 선택 (2-8명)
3. 총 라운드 수 선택 (3-10라운드)
4. 방 생성 시 6자리 고유 코드 생성
5. 방 상태를 '대기중'으로 설정
6. 호스트도 참가자로 게임방에 입장

**참가자:**

1. 방 코드 입력
2. 성별 선택 (남/여)
3. 해당 성별의 정원이 찼는지 확인
4. MBTI 선택 (16가지 중 1개)
5. 동물 캐릭터 선택 (20가지 중 1개, 방 내에서 중복 불가)
6. 닉네임 입력 (8자 이내)
7. 방 입장 후 참가자 목록 업데이트 (다른 참가자들은 새로고침 시 확인 가능)

##### 기능1의 유저플로우

```mermaid
graph TD
    A[앱 시작] --> B{역할 선택}
    B -->|방 만들기| C[게임 설정]
    B -->|방 참가하기| D[방 코드 입력]

    C --> E[남성 인원 설정]
    E --> F[여성 인원 설정]
    F --> G[라운드 수 설정]
    G --> H[방 생성 완료]
    H --> I[캐릭터 설정]

    D --> J{방 존재 여부}
    J -->|없음| K[오류 메시지]
    J -->|있음| L[성별 선택]
    L --> M{정원 확인}
    M -->|꽉참| N[입장 불가 알림]
    M -->|입장 가능| I[캐릭터 설정]

    I --> O[MBTI 선택]
    O --> P[동물 캐릭터 선택]
    P --> Q[닉네임 입력]
    Q --> R[통합 게임방 입장 (상태: waiting)]
    R --> S{모든 인원 입장?}
    S -->|아니오| R
    S -->|예| T[게임 시작 (상태: free_time)]
```

#### 기능2: 라운드 진행 및 지목

##### 기능2의 구체적인 비즈니스 로직

**자유시간 (3분):**

1. 현재 라운드 번호와 남은 시간 표시
2. "오프라인에서 자유롭게 놀아주세요!" 메시지
3. 3분 카운트다운 시작
4. 30초 전부터 준비 알림

**지목 타임 (1분):**

1. 현재 라운드 질문을 전체 참가자에게 표시
2. 각 참가자는 질문에 해당하는 상대방 1명 선택
3. 선택과 함께 짧은 메시지 작성 (50자 이내)
4. 지목 완료 후 본인의 완료 상태만 표시
5. 1분 타이머 완료 후 모든 선택 결과를 일괄 처리

**결과 처리:**

1. 상호 지목된 쌍 찾기
2. 매칭된 쌍에게 팡파레 효과와 함께 알림
3. 매칭되지 않은 참가자들에게도 결과 표시
4. 5분 아이스크림 산책 타임 안내
5. 다음 라운드까지 대기

##### 기능2의 유저플로우 (상태 기반 컴포넌트 전환)

```mermaid
graph TD
    A[게임 시작] --> B[상태: free_time]
    B --> C[자유시간 컴포넌트 렌더링]
    C --> D[30초 전 알림]
    D --> E[상태: selection_time]
    E --> F[지목 컴포넌트 렌더링]
    F --> G[질문 표시]
    G --> H[상대방 선택]
    H --> I[메시지 작성]
    I --> J[지목 완료]
    J --> K{모든 참가자 완료?}
    K -->|아니오| L[대기 상태 표시]
    L --> K
    K -->|예| M[상태: round_result]
    M --> N[결과 컴포넌트 렌더링]
    N --> O{매칭 여부}
    O -->|매칭됨| P[팡파레 + 산책 안내]
    O -->|매칭 안됨| Q[다음 라운드 안내]
    P --> R{마지막 라운드?}
    Q --> R
    R -->|아니오| S[다음 라운드 상태로]
    R -->|예| T[상태: finished]
    S --> B
    T --> U[최종 결과 컴포넌트 렌더링]
```

#### 기능3: 매칭 이벤트 및 결과 관리

##### 기능3의 구체적인 비즈니스 로직

**매칭 감지:**

1. 각 라운드 종료 시 지목 결과 분석
2. A가 B를 지목하고, B도 A를 지목한 경우 매칭 성립
3. 매칭된 쌍의 정보를 게임 세션에 저장

**매칭 이벤트:**

1. 매칭된 두 사람에게 특별한 팡파레 애니메이션 표시
2. "💕 {동물캐릭터1}과 {동물캐릭터2}가 매칭되었습니다!"
3. "5분간 아이스크림 산책을 다녀오세요!" 메시지
4. 다른 참가자들에게도 매칭 소식 공유 (익명 유지)

**게임 종료 후 결과:**

1. 전체 라운드에서 매칭된 횟수 표시
2. 가장 많이 지목받은 참가자 (인기왕/인기퀸)
3. 가장 많이 매칭된 참가자
4. 참가자별 매칭 히스토리 요약

##### 기능3의 유저플로우

```mermaid
graph TD
    A[지목 결과 수집] --> B[매칭 분석]
    B --> C{매칭된 쌍 있음?}
    C -->|없음| D[일반 결과 화면]
    C -->|있음| E[매칭 쌍 식별]
    E --> F[팡파레 애니메이션]
    F --> G[매칭 알림 표시]
    G --> H[산책 안내 메시지]
    H --> I[전체 참가자에게 공지]
    I --> J{마지막 라운드?}
    D --> J
    J -->|아니오| K[다음 라운드 대기]
    J -->|예| L[최종 결과 화면]
    L --> M[매칭 통계 표시]
    M --> N[인기왕/퀸 발표]
    N --> O[게임 종료]
```

#### 기능4: 참가자 이탈 및 재참여 관리

##### 기능4의 구체적인 비즈니스 로직

**참가자 이탈 처리:**

1. 나가기 버튼 클릭 시 선택 모달 표시: "완전히 나가기" vs "잠시 나가기"
2. "완전히 나가기" 선택 시:
   - 참가자 상태를 'left'로 변경
   - 다른 참가자들의 선택 목록에서 제거
   - 해당 참가자는 재입장 불가
3. "잠시 나가기" 선택 시:
   - 참가자 상태를 'temporarily_away'로 변경
   - 선택 목록에는 유지되지만 '일시이탈' 표시
   - 방 코드로 언제든지 재입장 가능

**호스트 변경:**

1. 호스트가 "완전히 나가기" 선택 시 자동으로 다음 참가자에게 호스트 권한 이양
2. 호스트 우선순위: 입장 순서가 빠른 참가자 순
3. 새 호스트에게 호스트 변경 알림

**재참여 처리:**

1. 'temporarily_away' 상태 참가자는 방 코드로 재입장 가능
2. 현재 진행 중인 라운드 상황에 따른 처리:
   - 자유시간 중: 즉시 참여 가능
   - 지목시간 중: 해당 라운드는 참여 불가, 다음 라운드부터 참여
3. 재입장 시 다른 참가자들에게 복귀 알림

**선택 시간 관리:**

1. 지목 타임 시작 시 1분 카운트다운 시작
2. 선택하지 않고 시간 초과 시 자동으로 "선택 안함"으로 처리
3. 1분 타이머 완료 후 모든 선택 결과를 일괄 처리

##### 기능4의 유저플로우

```mermaid
graph TD
    A[참가자가 나가기 버튼 클릭] --> B[이탈 유형 선택 모달]
    B --> C{완전히 나가기 선택?}
    C -->|예| D[참가자 상태 'left'로 변경]
    C -->|아니오| E[참가자 상태 'temporarily_away'로 변경]
    D --> F[선택 목록에서 제거]
    E --> G[선택 목록에 '일시이탈' 표시]
    F --> H{호스트였나?}
    G --> H
    H -->|예| I[다음 참가자에게 호스트 권한 이양]
    H -->|아니오| J[게임 계속 진행]
    I --> J

    K[일시이탈 참가자 재입장] --> L{현재 게임 상태}
    L -->|자유시간| M[즉시 참여 가능]
    L -->|지목시간| N[다음 라운드부터 참여]
    M --> O[복귀 알림]
    N --> O
```

#### 기능5: 질문 관리 시스템

##### 기능5의 구체적인 비즈니스 로직

**질문 분류 및 배치:**

1. 총 100개의 질문을 미리 준비
2. 질문을 3개 카테고리로 분류:
   - 초반 (1-3라운드): 가벼운 아이스브레이킹 질문
   - 중반 (4-7라운드): 흥미롭고 재미있는 질문
   - 후반 (8-10라운드): 조금 더 깊이 있는 질문
3. 각 라운드마다 해당 카테고리에서 랜덤으로 질문 선택
4. 한 게임 내에서 같은 질문 중복 방지

**선택 스킵 기능:**

1. 지목 화면에서 "이번 라운드 패스" 버튼 제공
2. 패스 선택 시 해당 라운드에서 지목하지 않음
3. 패스한 참가자도 다른 사람들이 지목할 수 있음
4. 결과 화면에서 패스한 참가자 수 표시

##### 기능5의 유저플로우

```mermaid
graph TD
    A[라운드 시작] --> B{라운드 번호 확인}
    B -->|1-3라운드| C[초반 질문 카테고리]
    B -->|4-7라운드| D[중반 질문 카테고리]
    B -->|8-10라운드| E[후반 질문 카테고리]
    C --> F[해당 카테고리에서 랜덤 선택]
    D --> F
    E --> F
    F --> G[질문 표시]
    G --> H[지목 화면]
    H --> I{참가자 선택}
    I -->|지목하기| J[상대방 선택]
    I -->|패스하기| K[이번 라운드 패스]
    J --> L[지목 완료]
    K --> L
```

## 5. 시스템 설계 (System Design)

```mermaid
graph TB
    subgraph "Frontend (Next.js)"
        A[상태별 React Components]
        B[Polling Hooks]
        C[React Context State Management]
        D[Game State Provider]
    end

    subgraph "Backend (Next.js Server Actions)"
        E[Game Room Actions]
        F[Participant Actions]
        G[Round Actions]
        H[Polling Actions]
    end

    subgraph "Database (Supabase)"
        I[PostgreSQL with RLS]
        J[Real-time State Tables]
    end

    subgraph "External Services"
        K[Character Assets]
    end

    A --> E
    B --> H
    C --> D
    D --> F
    D --> G
    E --> I
    F --> I
    G --> I
    H --> J
```

### 아키텍처 특징

- **폴링 기반 실시간 시스템**: WebSocket 대신 효율적인 폴링으로 실시간 상태 동기화
- **Server Actions**: REST API 대신 Next.js Server Actions로 서버-클라이언트 통신 간소화
- **상태 중심 설계**: 게임 상태를 중심으로 한 컴포넌트 조건부 렌더링
- **RLS 보안**: Supabase Row Level Security로 데이터 접근 권한 관리

## 6. 데이터베이스 스키마 (DB Schema)

```mermaid
erDiagram
    game_rooms {
        string id PK
        string code "6자리 방 코드"
        int male_capacity "남성 정원"
        int female_capacity "여성 정원"
        int total_rounds "총 라운드 수"
        int current_round "현재 라운드"
        string status "waiting/playing/finished"
        timestamp created_at
        string host_id FK
    }

    participants {
        string id PK
        string room_id FK
        string nickname "닉네임"
        string gender "male/female"
        string mbti "MBTI 유형"
        string character "동물 캐릭터"
        boolean is_host "호스트 여부"
        string status "active/temporarily_away/left"
        int join_order "입장 순서"
        timestamp joined_at
        timestamp last_seen
    }

    questions {
        string id PK
        string content "질문 내용"
        string category "질문 카테고리"
        int order "질문 순서"
    }

    rounds {
        string id PK
        string room_id FK
        int round_number "라운드 번호"
        string question_id FK
        string status "waiting/active/completed"
        timestamp started_at
        timestamp ended_at
    }

    selections {
        string id PK
        string round_id FK
        string selector_id FK "지목한 사람"
        string selected_id FK "지목받은 사람"
        string message "함께 보낸 메시지"
        timestamp created_at
    }

    matches {
        string id PK
        string round_id FK
        string participant1_id FK
        string participant2_id FK
        timestamp matched_at
    }

    game_rooms ||--o{ participants : "has many"
    game_rooms ||--o{ rounds : "has many"
    participants ||--o{ selections : "selector"
    participants ||--o{ selections : "selected"
    questions ||--o{ rounds : "used in"
    rounds ||--o{ selections : "contains"
    rounds ||--o{ matches : "creates"
    participants ||--o{ matches : "participant1"
    participants ||--o{ matches : "participant2"
```

## 7. 향후 개발 로드맵

### Phase 1: MVP (최소 기능 제품) - 1-2개월

- ✅ 기본 게임방 생성 및 참가
- ✅ 라운드 기반 게임 진행
- ✅ 지목 및 매칭 시스템
- ✅ 참가자 이탈/재참여 관리
- ✅ 질문 관리 시스템

### Phase 2: 사용자 경험 개선 - 1개월

- 🔄 **매칭 격려 시스템**: 계속 매칭이 안 되는 참가자를 위한 특별한 이벤트나 재미 요소
- 🔄 **SNS 공유 기능**: 매칭 결과나 게임 통계를 소셜미디어에 공유
- 🔄 **자유시간 미니게임**: 3분 대기시간 동안 즐길 수 있는 간단한 아이스브레이킹 게임
- 🔄 **커스텀 질문**: 사용자가 직접 질문을 추가할 수 있는 기능

### Phase 3: 고급 기능 - 1-2개월

- 🔄 **게임 테마 선택**: 다양한 게임 모드 (연애, 친목, 비즈니스 네트워킹 등)
- 🔄 **AI 기반 매칭 추천**: 이전 라운드 결과를 분석하여 매칭 가능성이 높은 조합 힌트 제공
- 🔄 **게임 기록 및 통계**: 개인별 게임 히스토리, 매칭 성공률 등 상세 통계
- 🔄 **오프라인 이벤트 연동**: 실제 매칭 후 추천 장소나 활동 제안

### Phase 4: 커뮤니티 및 확장 - 2개월

- 🔄 **매칭 후 후속 소통**: 매칭된 사용자들만의 별도 채팅방
- 🔄 **그룹 매칭**: 2:2, 3:3 등 그룹 단위 매칭 시스템
- 🔄 **이벤트 캘린더**: 정기 모임이나 특별 이벤트 관리
- 🔄 **관리자 도구**: 호스트를 위한 고급 관리 기능

## 8. 기술적 고려사항

### 성능 최적화

- 폴링 기반 실시간 상태 동기화 (효율적인 폴링 간격 관리)
- 페이지 가시성 감지를 통한 폴링 최적화
- 대용량 동시 접속자 처리 (서버 액션 기반)
- 모바일 환경 최적화 및 네트워크 상태 대응

### 보안 및 개인정보

- 익명성 보장 메커니즘
- 개인정보 최소 수집 원칙
- 게임 종료 시 데이터 자동 삭제 옵션
- Supabase RLS 기반 데이터 접근 제어

### 확장성

- 상태 기반 컴포넌트 아키텍처로 유지보수성 향상
- 다국어 지원 준비
- 다양한 플랫폼 (웹, 모바일 앱) 지원
- 폴링 시스템의 확장 가능한 아키텍처
